<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title></title>
    <description>Um blog sobre tecnologia e todas as angústias e alegrias que a cercam.</description>
    <link>/</link>
    <atom:link href="/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Tue, 26 Jul 2016 20:19:40 -0300</pubDate>
    <lastBuildDate>Tue, 26 Jul 2016 20:19:40 -0300</lastBuildDate>
    <generator>Jekyll v3.1.3</generator>
    
      <item>
        <title>Design para devs #1 - Introdução</title>
        <description>&lt;div class=&quot;post-img-container&quot;&gt;
	&lt;img class=&quot;post-img&quot; src=&quot;http://www.preissdesign.com.br/wp-content/uploads/2016/06/graphic-design-tools-Feature_1290x688_MS.jpg&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;Essa série de posts tem como propósito facilitar o entendimento de alguns conceitos de design para os desenvolvedores frontend. Neste primeiro, daremos apenas um introdução generalista e simplista.&lt;/p&gt;

&lt;!--bora--&gt;

&lt;p&gt;Não sou o melhor designer do mundo e estou longe de ser bom, mas nos últimos tempos tenho dedicado boa parte do meu tempo livre a entender como melhorar visualmente minhas criações. Em geral, trabalho apenas com implementação, mas sempre me interessei em entender como são pensadas as interfaces e porque são do jeito que são. Acabei por perceber que existe muita exatidão por trás da criatividade.&lt;/p&gt;

&lt;p&gt;É comum de todo desenvolvedor frontend começar a querer desenvolver seus próprios projetos, seja pra treinar suas habilidades ou pra colocar pra frente ideias reais. Mas sempre surge o dilema: criar do zero interfaces não requer apenas codificação, é preciso também ser um bom designer. No mínimo, não usar Comic Sans. Eu segui esse caminho (frontend-&amp;gt;design) e aprendi algumas coisas. Inicialmente, percebi que uma coisa muito clara: é muito mais fácil virar frontender sendo designer do que fazer o caminho inverso. A área de design requer muito mais apuração de senso crítico para um resultado minimamente interessante. Minha experiência tem sido interessante e rendido bons frutos. Aqui vão algumas dicas introdutórias sobre o que aprendi.&lt;/p&gt;

&lt;h2 id=&quot;entenda-o-que--design&quot;&gt;Entenda o que é Design.&lt;/h2&gt;

&lt;p&gt;“Design é beleza”. Não, não é. E isso no começo é difícil de entender. Implementar um interface bonita é importante sim, mas se a beleza não for útil, ela pode ser descartada. O papel do design não é tornar as coisas simplemente bonitas, mas torná-las funcionais. A beleza é a consequência e não a causa. Desenvolva sempre suas ideias com base em seu conteúdo, adaptar o conteúdo para ele “caber” no design é um caminho que quase sempre gera resultados ruins.&lt;/p&gt;

&lt;h2 id=&quot;conceitos-bsicos-cores-e-tipografia&quot;&gt;Conceitos básicos: cores e tipografia.&lt;/h2&gt;

&lt;p&gt;Esses são conceitos básicos que se tem que estudar antes de qualquer coisa: as cores e a tipografia constituem quase que 100% de um design na web.&lt;/p&gt;

&lt;p&gt;Entender sobre &lt;a href=&quot;http://www.teoriadascores.com.br/&quot;&gt;Teoria das Cores&lt;/a&gt;, &lt;a href=&quot;http://www.teoriadascores.com.br/discos-cromaticos.php&quot;&gt;discos cromáticos&lt;/a&gt; e suas utilidades para a web é de suma importância para desenvolvimento de uma percepção visual mais lúcida. Criação de paletas de cores e entendimento de seus significados é essencial também. &lt;a href=&quot;https://www.smashingmagazine.com/2016/04/web-developer-guide-color/&quot;&gt;Este guia&lt;/a&gt; é uma mão na roda pra quem não tem ideia de nada.&lt;/p&gt;

&lt;p&gt;Como André Rafael, do Origamid, diz: tipografia é 95% da web, entendê-la e fazer bom uso de seus conceitos significa ter domínio sobre boa parte do seu conteúdo. Conhecer as famílias tipográficas, seus usos mais comuns e recomendados, saber quando usar bolds, italics e underlines e também entender sobre seus tamanhos e kernings. &lt;a href=&quot;http://design.codeschool.com/levels/1&quot;&gt;Este curso&lt;/a&gt; possui o primeiro módulo free e é muito esclarecedor para iniciantes.&lt;/p&gt;

&lt;h2 id=&quot;pense-no-design-de-tudo&quot;&gt;Pense no design de tudo&lt;/h2&gt;

&lt;p&gt;Criar interfaces, componentes ou mesmo temas pra wordpress não requerem apenas habilidades específicas de webdesign, mas sim habilidades genéricas de design gráfico, experiência de usuário e às vezes até de design de produto, portanto, pensar no design de tudo é um exercício muito bom para aprimorar as skills.&lt;/p&gt;

&lt;p&gt;E quando eu digo tudo, não é apenas tudo referente ao seu projeto em si, mas sobre a vida e as coisas que te cercam. Comece a pensar na forma em que você organiza sua comida no prato quando almoça, na forma que veste suas calças ao sair de manhã, na forma como digita suas frases num texto e obviamente, como essas frases ficarão dispostas no seu blog. Pensar no design de tudo é um exercício simples de ser feito e que abre os horizontes de formas inimagináveis, pois se você conseguir entender qual a melhor forma de de dobrar sua calça ou de organizar sua comida no prato, organizar os posts do seu layout de blog se tornará mais simples.&lt;/p&gt;

&lt;h2 id=&quot;tenha-boas-referncias-na-manga---inclusive-dos-frameworks&quot;&gt;Tenha boas referências na manga - inclusive dos frameworks&lt;/h2&gt;

&lt;p&gt;Usar um framework não é pecado, mas saber quando não usar um é uma dádiva dos deuses. Frameworks de CSS geralmente funcionam assim: eles te dão helpers, grids e em alguns casos, mixins e extends para facilitar sua vida. Também te dão componentes prontos, onde você só precisa adicionar as classes nas suas tags e pronto: a mágica acontece. O que não se entende no começo é que os frameworks acabam por gerar um &lt;a href=&quot;https://en.wikipedia.org/wiki/Style_guide&quot;&gt;styleguide&lt;/a&gt; padrão para o desenvolvedor. E nem sempre é bom. Frameworks como o &lt;a href=&quot;https://milligram.github.io/&quot;&gt;Miligram&lt;/a&gt; ou o &lt;a href=&quot;http://semantic-ui.com/&quot;&gt;Semantic UI&lt;/a&gt;, são exemplos de ferramentas que se preocupam mais com as funcionalidades e semântica do que com oferecer estilos definitivos prontos.&lt;/p&gt;

&lt;p&gt;Frameworks como Bootstrap ou Foundatoin são interessantes para desenvolvimento ágil, mas sua personalização é essencial. Recomendo usá-los como referência e não como ferramenta principal. Como sempre digo, o mais indicado é criar um framework para cada projeto, com styleguide próprio e se possível, com uso do &lt;a href=&quot;http://tableless.com.br/o-que-e-design-atomic/&quot;&gt;atomic design&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;No geral, além dos frameworks, o &lt;a href=&quot;http://codepen.io/&quot;&gt;CodePen&lt;/a&gt; e o &lt;a href=&quot;http://www.awwwards.com/&quot;&gt;Awwwards&lt;/a&gt; são boas referências para se ter na manga no quesito de webdesign. Outras referências que pode ser interessante ter é de outra área que seja correlata ao design, por exemplo: fotografia ou moda. Mas aí vai do seu gosto.&lt;/p&gt;

&lt;p&gt;Este texto tem como objetivo introduzir desenvolvedores à alguns conceitos de design, nos próximos textos da série, explorarei aspectos mais práticos e mais específicos. Até lá!&lt;/p&gt;
</description>
        <pubDate>Tue, 26 Jul 2016 00:00:00 -0300</pubDate>
        <link>/2016/07/26/design-para-devs-1-introducao.html</link>
        <guid isPermaLink="true">/2016/07/26/design-para-devs-1-introducao.html</guid>
        
        <category>workflow,</category>
        
        <category>css,</category>
        
        <category>less</category>
        
        
      </item>
    
      <item>
        <title>A internet das coisas e seus desafios para a UX</title>
        <description>&lt;div class=&quot;post-img-container&quot;&gt;
	&lt;img class=&quot;post-img&quot; src=&quot;https://cdn-images-1.medium.com/max/2000/1*AJn83gYW2PesqrfFQpkcnA.jpeg&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;No universo da Tecnologia da Informação existe uma lei que começou como uma profecia de um presidente da Intel, Gordon Moore, e acabou virando uma regra levada bastante em consideração quando se fala de evolução tecnológica nas últimas décadas. Chama-se Lei de Moore e ela diz que a cada 18 meses, o mercado de hardware produziria CPUs com o dobro de velocidade e pela metade do preço. Talvez isso não seja matematicamente verdade, se formos colocar na ponta do lápis, mas o que interessa é que essa lei nos dá aporte para entendermos qual a proporção de crescimento que a tecnologia tem como base.&lt;/p&gt;

&lt;!--bora--&gt;

&lt;p&gt;O interessante de verdade não é exatamente a evolução do hardware em si, mas sim as revoluções tecnológicas que surgem através do aumento da capacidade de processamento, diminuição do tamanho dos componentes, portabilidade e acessibilidade destes. Como exemplo disso temos o surgimentos de placas de prototipação como o Arduino e seus colegas de turma, temos computadores portáteis como Raspberry Pi a preço de banana.&lt;/p&gt;

&lt;p&gt;Na última década, o maior impacto que a evolução prevista por Moore causou foi a chegada do mercado mobile com força total. Hoje em dia todos nós temos Smartphones em mãos, e sob a perspectiva da UX, podemos ver uma disruptura no cenário de interação de usuário, que passou a ser mais intimista, mas rápido, fluido e intuitivo. Mas esses benefícios custaram caro, podemos perceber ainda hoje, um cenário de discussões bastante quentes sobre tópicos de usabilidade mobile, performance e como todos esses aspectos influenciam na visão que o usuário cria sobre o produto.
Ou seja, sempre que um espaço novo aparece no campo tecnológico, também aparece muito espaço para estudo sobre questões de experiência do usuário. A divisão de água que os smartphones causaram foi a de trazer pra próximo a internet, deixá-la mais fluida. Mas a evolução tecnológica não parou por aí e o próximo passo já está sendo dado.&lt;/p&gt;

&lt;h2 id=&quot;a-internet-das-coisas&quot;&gt;A Internet das Coisas&lt;/h2&gt;

&lt;p&gt;Você já deve ter ouvido falar desse termo, não? Se não, aqui vai uma pequena sinopse:
Quando a tecnologia dos mobiles apareceu, trouxe junto consigo a ideia de que a internet não está presa aos computadores, mas ainda assim, se pararmos para pensar nas formas que nos conectamos, ainda é muito limitada, pois temos inúmeras coisas no nosso cotidiano que ainda trabalham de forma offline e que poderiam ser colocadas “on the line”.&lt;/p&gt;

&lt;p&gt;A Internet das Coisas ou IoT (do inglês Internet of Things), surge como uma das revoluções abarcadas pela alta capacidade de hardware que temos hoje em dia a custos relativamente baixos — apesar de não ser a custo de mercado viável para a maioria da população, só o fato de não ser algo digno de ficção científica já faz disso algo mais próximo da realidade. Esse conceito nos trás a possibilidade de conectar os dispositivos do nosso cotidiano à internet, dando assim diversas novas funcionalidades para aparelhos que já são nossos conhecidos.&lt;/p&gt;

&lt;p&gt;Esse novo modo de ver as coisas veio para tirar a ideia de que a internet e a tecnologia está fadada a avançar para construir gadgets como smartphones, smartwatches e companhia. Parece ser muito mais abrangente e interessante, para solucionar problemas, criar formas de conectar as coisas do nosso cotidiano à internet e abrir margem para novas soluções instigantes tanto do ponto de vista do design quanto do ponto de vista tecnológico e visionário.&lt;/p&gt;

&lt;p&gt;Mas com esse novo ecossistema sendo criado, não apenas soluções inovadoras aparecerão, como também problemas cabeludos, já que é algo que não foi testado em diversos aspectos.&lt;/p&gt;

&lt;p&gt;Podemos comparar isso com o advento dos computadores em escritórios na década passada. Apesar de arquivos digitais serem uma realidade hoje em dia, ainda podemos ver diversas instituições que ainda usam arquivos físicos, pastas físicas e possuem setor de protocolo. Demorou um tempo pra se tornar costume criar arquivos diretamente no computador, se adaptar à organização das pastas não-físicas, entender como funcionavam backups e porque eles eram tão importantes, entender qual a diferença entre extensões .pdf e .doc e mais mil outros problemas que surgiram por motivos de: era um ecossistema novo.&lt;/p&gt;

&lt;p&gt;Podemos dizer que todo divisor de águas trás consigo um grande caminho de terra para se atravessar. E a Internet das coisas também.&lt;/p&gt;

&lt;p&gt;Do ponto de vista do UX Design, as portas que a Internet das Coisas nos abre são imensas. Inicialmente, podemos levar em consideração que o conceito de design, no geral, remete à resolução de problemas. No panorama que essa revolução da Internet das Coisas abre, temos diantes de nós diversas novas ferramentas úteis para chegarmos a soluções cada vez mais funcionais.&lt;/p&gt;

&lt;p&gt;Um problema que pode ser encontrado aqui é o seguinte: qualquer coisa que surgir como novidade na área de IoT será novidade pro usuário final. O papel do UX Designer não é só pensar numa experiência interessante para o usuário final, mas pensar também que a transição entre as tecnologias antigas e as novas tem que acontecer de forma intuitiva e “suave” para o usuário. Qualquer impacto brusco pode causar frustração ou aversão. Então nos deparamos com um dilema: pensar em soluções que sejam simples, que se comuniquem com o usuário que está acostumado com outros níveis de interação mas que ainda assim se utilizem de todo o aparato que a IoT nos oferece.&lt;/p&gt;

&lt;h2 id=&quot;na-prtica&quot;&gt;Na prática&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=joeyLbIxvKo&quot;&gt;Aqui&lt;/a&gt; temos um vídeo de um exemplo prático de tecnologia implementada pela IoT. A ideia é simples: dar poderes à mais a um produto que é de uso comum nosso, o controle remoto. Um ponto que deve ser levado em consideração é a configuração do dispositivo, quando se pensa em UX. No caso, quanto mais out-of-the-box (pronto pra uso sem nenhuma configuração), melhor.&lt;/p&gt;

&lt;p&gt;No caso desse controle remoto, podemos observar que apesar de ter que ser feito manualmente, o processo de configuração é simples e intuitivo, sendo feito com base em perguntas objetivas e diretas. Após a configuração, o uso dele é simples também: desbloqueio e escolha do aparelho que se quer controlar, já que é um controle universal. Do ponto de vista do usuário, a experiência pode ser traduzida em apenas uma pergunta: “Esse dispositivo deixa minha experiência de controle remotos mais simples ou é apenas um aparato que vai me atrapalhar mais do que ajudar?”&lt;/p&gt;

&lt;p&gt;Talvez você pense que qualquer coisa que envolva o ecossistema das IoTs será infinitamente mais rápida, prática e intuitiva do que uma mesma solução puramente mecânica, mas não é bem assim. Nosso próximo exemplo trata bem disso.
Começar um projeto pela interface pode ser extremamente perigoso&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://medium.com/ux-user-experience-design-em-portugues/come%C3%A7ar-um-projeto-pela-interface-pode-ser-extremamente-perigoso-64ece1e6f696&quot;&gt;Este artigo&lt;/a&gt;  fala especificamente de um produto, a fechadura Lockitron, que se vende como uma fechadura inteligente para portas residenciais. Resumindo o artigo, a primeira versão da Lockitron funcionava em conjunto com um aplicativo para smartphone, ou seja: sempre que o usuário chegava em casa, tinha que pegar o smartphone, desbloquear, procurar o aplicativo dentre todos os que estavam instalados no smartphone, esperar ele carregar e só então poder abrir a fechadura. E no fim das contas, o processo de pegar a chave no bolso e abrir a porta acabava sendo muito mais fácil do que usar a fechadura inteligente. Era um esforço muito menor para um retorno igual.&lt;/p&gt;

&lt;p&gt;Logo, foi preciso pensar em uma reformulação para que o produto fizesse sentido em existir, já que o objetivo dele era cumprir a função de abrir a porta de forma mais simples e descomplicada do que com uma chave. Então, após estudos, foi desenvolvida uma nova versão do produto, essa agora funcionando com sincronização via bluetooth: a porta era destravada sempre que o usuário se aproximava dela.&lt;/p&gt;

&lt;p&gt;Assim, o processo se tornou mais intuitivo que o de abrir a porta com a chave, logo, a solução passou a ser eficaz.&lt;/p&gt;

&lt;h2 id=&quot;ligando-os-pontos&quot;&gt;Ligando os pontos&lt;/h2&gt;

&lt;p&gt;A Internet das Coisas dá voz a uma nova revolução que vai expandir os horizontes do UX Design, tirando a internet do escopo desktop-mobile e trazendo-a para um novo modo de trabalho, onde tudo vai estar conectado de forma a nos propiciar experiências mais simples, cômodas e intuitivas.&lt;/p&gt;

&lt;p&gt;Esse novo panorama de criação de soluções abre margem para muitos erros também, já que não temos noção do que é ou não interessante a se fazer, visto que esse ecossistema ainda não foi testado o suficiente para serem gerados padrões de usabilidade e interação.
Mas isso não quer dizer que não seja um risco bom a se correr, testar novos modos de interação para criar novas experiências de usuário. As ferramentas estão aí pra serem usadas, só se deve tomar cuidado para entender qual a melhor maneira de fazer isso, buscando sempre resolver o problema da melhor maneira e nunca dificultar sua resolução, pois esse é o papel do design no mundo.&lt;/p&gt;
</description>
        <pubDate>Sun, 03 Jul 2016 00:00:00 -0300</pubDate>
        <link>/2016/07/03/a-internet-das-coisas-e-seus-desafios-para-a-UX.html</link>
        <guid isPermaLink="true">/2016/07/03/a-internet-das-coisas-e-seus-desafios-para-a-UX.html</guid>
        
        <category>ux</category>
        
        <category>designe,</category>
        
        <category>IoT</category>
        
        
      </item>
    
      <item>
        <title>LESS: uma boa escolha para iniciantes</title>
        <description>&lt;div class=&quot;post-img-container&quot;&gt;
	&lt;img class=&quot;post-img&quot; src=&quot;https://upload.wikimedia.org/wikipedia/commons/8/81/LESS_Logo.svg&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;“Menos é mais”&lt;/p&gt;

&lt;p&gt;Essa é uma frase bastante usada em diversas áreas, prega a ideia de que a economia de recursos é algo beneficente para o produto final. É usado na área do design, por exemplo, para cortar recursos visuais usados desnecessariamente que no fim das contas apenas prejudicam a experiência do usuário. Acredito que com o preprocessadores não é diferente e é por isso que eu uso e defendo o LESS.
&lt;!--bora--&gt;
## O que é um preprocessador de CSS?&lt;/p&gt;

&lt;p&gt;Um preprocessador funciona como uma extensão do CSS comum que temos hoje em sua versão 3. O preprocessador é uma espécie de “compilador” que gera código CSS de acordo com um código escrito por nós em uma linguagem que possui diversas funcionalidades a mais que o próprio CSS. No fim das contas, há gente que defenda o uso do CSS puro, mas em projetos grandes, o uso de preprocessadores torna-se uma mão na roda. Vejam mais nesse artigo sobre o &lt;a href=&quot;http://markdotto.com/2014/07/23/githubs-css/&quot;&gt;CSS do Github&lt;/a&gt; e sobre o CSS do &lt;a href=&quot;http://ianfeather.co.uk/css-at-lonely-planet/&quot;&gt;Lonely Planet&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Temos alguns preprocessadores disponíveis para conhecermos e usarmos da forma que acharmos melhor. Costumo dizer que é só questão de gosto a escolha de um deles, mas ao longo do tempo, percebi no LESS algumas características que o fazem ser bastante interessante como primeiro contato de um Frontender Junior no universo dos preprocessadores. Vamos falar um pouco sobre os motivos disso.&lt;/p&gt;

&lt;h2 id=&quot;porque-eu-uso-less&quot;&gt;Porque eu uso LESS&lt;/h2&gt;

&lt;p&gt;Quando quis começar a usar preprocessadores, pesquisei bastante e me dei conta que no geral, preprocessadores eram todos iguais e que a minha escolha não iria fazer tanta diferença assim, então escolhi o LESS porque achei a &lt;strong&gt;documentação dele bem mais sucinta e objetiva&lt;/strong&gt; que a do Stylus e do SASS, outros dois preprocessadores em questão na época. Então parti na jornada e passei a usar o LESS em projetos menores para ir me adaptando, pois supostamente era um jeito novo de fazer as coisas. Mas para a minha surpresa, a curva de aprendizado foi bem curta. Apenas precisei entender quando era bom ou não usar tal funcionalidade.&lt;/p&gt;

&lt;p&gt;Em menos de dois projetos eu já estava escrevendo na sintaxe do LESS com a mesma produtividade que escrevia CSS. Mas isso só foi assim por causa da sintaxe do LESS ser como é.&lt;/p&gt;

&lt;h2 id=&quot;sintaxe&quot;&gt;Sintaxe&lt;/h2&gt;

&lt;p&gt;O LESS não te faz criar novos costumes quanto à sintaxe e ele só possui uma sintaxe. Muitos podem defender o Stylus e a sintaxe SCSS por ela agilizar o processo sem ter que escrever as chaves, os dois pontos ou os ponto e vírgulas. Mas o ponto que ponho aqui é: haverão casos onde não será possível ou interessante o uso de preprocessadores e você não poderá controlar isso sempre. Então, vez ou outra você vai ser obrigado a escrever CSS puro. E quando isso acontecer, quanto mais próxima for a sintaxe que você usa no seu preprocessador da sintaxe original do CSS puro, mais fácil e produtivo vai ser você escrever código sem preprocessador.&lt;/p&gt;

&lt;p&gt;No começo do projeto do SASS, a sintaxe era muito diferente de CSS puro. A sintaxe que hoje é conhecida pelo próprio nome SASS, é identada, sem a presença de dois pontos, ponto e vírgula ou chaves. O LESS surgiu logo depois como opção para quem queria algo mais próximo do CSS. Com o surgimento do LESS, o time do SASS percebeu o quão louco era o fato de eles terem alterado a sintaxe do CSS em seu preprocessador, que eles criaram uma nova sintaxe, a SCSS, que permite você escrever código mais próximo da sintaxe original do CSS e ainda assim ter as funcionalidades do preprocessador.&lt;/p&gt;

&lt;p&gt;O único argumento a favor de uma sintaxe identada como a SASS ou a do Stylus é o fator produtividade. Supostamente, você se torna mais produtivo se não escrever ponto e vírgulas, chaves e dois ponto, mas isso vai por água a baixo com o artifício dos snippets e atalhos dos editores de texto. Eu por exemplo nem escrevo as palavras completas dos atributos. Quando quero adicionar um &lt;code&gt;padding&lt;/code&gt;, digito &lt;code&gt;pa&lt;/code&gt; e o snippet já completa, quanto mais em relação à pontos chaves e outros símbolos sintáticos…&lt;/p&gt;

&lt;h2 id=&quot;less-usa-javascript&quot;&gt;LESS usa JavaScript&lt;/h2&gt;

&lt;p&gt;O Stylus também usa. Mas porque isso pode ser bom pra iniciantes? Porque JavaScript é algo praticamente obrigatório para qualquer um que queira mexer com web, ruby apesar de ser uma ótima linguagem em diversos aspectos, não é tão próxima assim dos iniciantes. O SASS usa a linguagem ruby e seu gerenciador de pacotes como padrão. Não questiono aqui a qualidade da linguagem ou seu gerenciador de pacotes, mas é inegável que hoje em dia, há muito mais frameworks e ferramentas para frontenders usando o &lt;code&gt;npm&lt;/code&gt; como gerenciador de pacotes. Isso ajuda a organizar melhor e nos faz não entrar num ecossistema novo apenas para usar um preprocessador.&lt;/p&gt;

&lt;p&gt;Eu sei que há pacotes do SASS para &lt;code&gt;npm&lt;/code&gt; também e para diversos outros gerenciadores de pacotes, mas na documentação oficial é recomendado o uso do GEM para instalar o SASS e acredito que o suporte oficial também é priorizado para a versão do GEM.&lt;/p&gt;

&lt;h2 id=&quot;uso-do-lado-do-cliente&quot;&gt;Uso do lado do cliente&lt;/h2&gt;

&lt;p&gt;Iniciantes em computação têm medo de CLIs. Isso é um fato inegável. E no universo frontend não é diferente. Usar um terminal pode ser um saco para iniciantes, esquecer uma opção ou um parâmetro pode gerar um resultado não esperado e frustrá-lo muito facilmente, portanto, CLIs nem sempre são boas opções para um começo.&lt;/p&gt;

&lt;p&gt;Esse medo, é claro, tem que ser perdido o mais rápido possível. Automatizadores de tarefas como Gulp e Grunt (ou outros), git e diversas outras ferramentas que usam CLIs são essenciais para um workflow produtivo, mas para os casos em que realmente há uma aversão ao terminal, o LESS traz uma opção que nenhum dos outros preprocessadores trazem: o uso do LESS do lado do cliente.&lt;/p&gt;

&lt;p&gt;Basicamente, ele compila os arquivos less “on-the-fly”, do lado do cliente, no browser mesmo, usando JavaScript. Basta você seguir as &lt;a href=&quot;http://lesscss.org/#client-side-usage&quot;&gt;instruções&lt;/a&gt; que essa funcionalidade pode ser facilmente alcançada. É bom deixar claro que o uso dessa funcionalidade não é nada interessante para projetos reais em produção, pois um simples JavaScript desativado pode acabar com seus estilos, sem falar que prejudica um tanto a performace da página, mas é uma boa pedida para aprendizado com projetos locais, facilita bastante as coisas no começo, caso queira testar o LESS sem ter muito trabalho.&lt;/p&gt;

&lt;p&gt;Uma outra opção de preprocessador muito interessante para iniciantes é o &lt;a href=&quot;http://www.myth.io/&quot;&gt;Myth&lt;/a&gt;, mas ele é tema de outro post, então sem spoilers por aqui.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Qualquer dúvida nos comentários. Se gostou do post, ajude a divulgar o blog, faço ele apenas por amor, sem monetização nenhuma, então quanto mais longe chegar, mais “bem pago” eu serei ♥.&lt;/p&gt;
</description>
        <pubDate>Sun, 19 Jun 2016 00:00:00 -0300</pubDate>
        <link>/2016/06/19/less-uma-boa-escolha-para-iniciantes.html</link>
        <guid isPermaLink="true">/2016/06/19/less-uma-boa-escolha-para-iniciantes.html</guid>
        
        <category>workflow,</category>
        
        <category>css,</category>
        
        <category>less</category>
        
        
      </item>
    
      <item>
        <title>Vamos falar sobre o VIM</title>
        <description>&lt;div class=&quot;post-img-container&quot;&gt;
	&lt;img class=&quot;post-img&quot; src=&quot;/assets/post-imgs/vim.png&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;Uma das maiores pautas de discussão que encontramos nos fóruns e grupos do facebook sobre workflow em geral é quanto ao editor de texto que cada um usa. Existe uma infinidade deles e eu já usei diversos. Mas acho que encontrei o mais completo e funcional. Vamos falar um pouco sobre ele? Bora.&lt;/p&gt;

&lt;!--bora--&gt;

&lt;h2 id=&quot;sobre-editores-de-texto&quot;&gt;Sobre editores de texto&lt;/h2&gt;

&lt;p&gt;Primeiramente, queria dizer que é essencial usar um editor de texto do seu gosto, que te deixa produtivo e que atende às suas necessidades.&lt;/p&gt;

&lt;p&gt;O fato é: eu já usei todos os editores do mundo, acho. Levemos em consideração que eu não gosto de IDEs. Usar Java + NetBeans foi o bastante para eu entender que IDEs, apesar de nos deixar bastante produtivos nos tirando certas obrigações, elas também nos deixam mal acostumados. A IDE nada mais é que um editor de texto cheio de plugins que você quase não usa, que deixa tudo mais lento que o normal e que acaba criando uma camada a mais entre você e o código.&lt;/p&gt;

&lt;p&gt;IDE é uma boa solução para bons programadores, que já sabem como determinada linguagem funciona e só querem se preocupar em programar, para qualquer um que queira aprender mais a fundo sobre funcionamento de algumas configurações e entendimento geral da linguagem/workflow, programar usando um editor de texto e configurando seus próprios plugins pode ser bem mais interessante.&lt;/p&gt;

&lt;p&gt;O primeiro editor que usei foi o sublime 2 e ele ainda está entre os meus favoritos. O ecossistema que o sublime criou foi realmente inovador e ainda hoje é um dos editores mais indicados para todos os níveis. Usei o Atom, mas no fim das contas é muito pesado pra um editor. Usei o Visual Studio Code 2015, que é bem parecido com o Atom e menos pesado, mas não há tantos plugins assim. Usei o Builder, um editor do Gnome, mas ele é muito limitado ainda para desenvolvimento web. No fim das contas, pra ser bom pra mim, o editor tinha que ser leve, rápido e com um ecossistema interessante de plugins e ferramentas. Depois de tudo, decidi voltar então para o Sublime, que satisfazia todas essas características.&lt;/p&gt;

&lt;p&gt;Até que eu conheci o VIM.&lt;/p&gt;

&lt;h2 id=&quot;uma-histria-de-amor-melhor-que-crepsculo&quot;&gt;Uma história de amor melhor que crepúsculo&lt;/h2&gt;

&lt;p&gt;Me pareceu um tanto surreal a ideia de um editor de texto onde eu não usaria o mouse. Achei que seria terrível no começo, e talvez até tenha sido, mas a leveza, rapidez e os plugins me fizeram arriscar um pouco de tempo para me tornar produtivo nele.&lt;/p&gt;

&lt;p&gt;A premissa do VIM é usar o mínimo do mouse possível. Isso acaba sendo interessante porque a gente, obviamente, escreve o código com o teclado, configurar e manipular o editor com o mesmo periférico que usamos pra escrever os códigos acaba sendo uma mão na roda. Não é preciso tirar a mão do teclado e perder 2s pra selecionar aquela opção do editor, só preciso digitar um comando e dar um enter. Acredite ou não, isso faz bastante diferença.&lt;/p&gt;

&lt;p&gt;Enfim, não vim aqui pra defender o VIM e seu uso, seus benefícios e produtividade. Vim dar umas dicas rápidas para iniciantes. Se quiser saber mais sobre o editor, dê uma lida no &lt;a href=&quot;https://brizeno.wordpress.com/2014/07/24/por-que-voce-tambem-gostaria-de-utilizar-vim/&quot;&gt;texto do Marcos Brizeno&lt;/a&gt; e no do &lt;a href=&quot;https://woliveiras.com.br/posts/Comecando-com-o-editor-de-texto-VIM/&quot;&gt;Willian Oliveira&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;algumas-dicas-pra-comear&quot;&gt;Algumas dicas pra começar&lt;/h2&gt;

&lt;p&gt;Eu perdi um dia quase todo pesquisando sobre configurações do vim, sobre plugins e sobre como deixá-lo mais user-friendly. E não me arrependo, descobri ferramentas bem interessantes que me ajudaram bastante. E como eu sou muito gente fina, vou passar as dicas pra vocês.&lt;/p&gt;

&lt;h3 id=&quot;aprendendo&quot;&gt;Aprendendo&lt;/h3&gt;

&lt;p&gt;Existem vários meio de aprender a usar o VIM e você pode fazer isso antes ou depois de configurar ele com as próximas dicas que eu vou dar.&lt;/p&gt;

&lt;p&gt;O tutorial mais indicado para aprendizado é o tutorial do próprio VIM, o &lt;code&gt;vimtutor&lt;/code&gt;. Digite no seu terminal &lt;code&gt;vimtutor&lt;/code&gt; e siga as instruções. Não é necessário fazer tudo de uma vez, como disse o &lt;a href=&quot;https://woliveiras.com.br/posts/Comecando-com-o-editor-de-texto-VIM/&quot;&gt;Willian Oliveira&lt;/a&gt; em seu texto que me auxiliou bastante. O mais interessante é que o &lt;code&gt;vimtutor&lt;/code&gt; aborda na prática, com exercícios, o que faz o aprendizado ser bem dinâmico.&lt;/p&gt;

&lt;p&gt;Outra opção é pegar os comandos do VIM e ir testando na prática, que é basicamente o que o &lt;code&gt;vimtutor&lt;/code&gt; faz, mas você terá mais liberadade pra testar e para fazer seu próprio caminho. Traduzi há um tempo atrás um pequeno guia para iniciantes e intermediários que pode ser interessante, &lt;a href=&quot;https://gist.github.com/netoguimaraes/ef6039d565dd5c8343fc&quot;&gt;clique aqui&lt;/a&gt; para ver.&lt;/p&gt;

&lt;p&gt;A opção em português mais completa é um projeto do Willian Oliveira, o projeto &lt;a href=&quot;https://woliveiras.com.br/vimparanoobs/&quot;&gt;VIM para noobs&lt;/a&gt;. Ele dá todo um embasamento para você se tornar um ninja do VIM.&lt;/p&gt;

&lt;h3 id=&quot;gerando-o-vimrc&quot;&gt;Gerando o .vimrc&lt;/h3&gt;

&lt;p&gt;É vero que para usar o VIM como editor de texto para programação não é tão simples no começo. Não é simplesmente abrir e começar a escrever os códigos que o syntax highlight já vai estar lá, a identação configurada, os snippets nem nada. O VIM vem praticamente inutilizável para programar em sua versão padrão, que já vem instalada em distros Linux. Para configurá-lo, temos que editar um arquivo de configuração chamado &lt;code&gt;.vimrc&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Se você quiser entender todas as variáveis, entender como tudo funciona no VIM e escrever seu próprio arquivo de configuração na mão, eu vou te dar total apoio. Mas eu não fiz isso. Existem ferramentas bem simples feitas para auxiliarem nós, os preguiçosos, iniciantes e espertalhões, a configurarmos o nosso VIM da forma mais rápida possível. Temos o &lt;a href=&quot;http://vimconfig.com/&quot;&gt;vimconfig.com&lt;/a&gt;, que é muito simples e rápido e temos o &lt;a href=&quot;http://vim-bootstrap.com/&quot;&gt;vim-bootstrap.com&lt;/a&gt; que é um pouco mais completo, mas também muito simples e que dá suporte também para o NeoVim, um fork do VIM.&lt;/p&gt;

&lt;h3 id=&quot;sobre-os-plugins-do-vim&quot;&gt;Sobre os plugins do VIM&lt;/h3&gt;

&lt;p&gt;São infinitos. Sério. E são muito robustos, pois o VIM está sendo usado há 25 anos (mais velho que eu!) e tem alguns plugins com idade bem avançada, o que significa que foram maturados o suficiente pela comunidade.&lt;/p&gt;

&lt;p&gt;Para procurar, instalar e configurar os plugins que uso no meu editor, utilizei o site &lt;a href=&quot;http://vimawesome.com/&quot;&gt;vimawesome.com&lt;/a&gt;, que fornece uma busca simples, sistema de tags e explicações sobre os plugins. No vim awesome também podem ser encontrados temas para o VIM, que pode ser interessante pra quem se importa com o visual. E tem muita coisa interessante lá. &lt;a href=&quot;http://www.pinceladasdaweb.com.br/blog/2014/02/18/plugins-do-vim-para-frontend/&quot;&gt;Esse artigo&lt;/a&gt; do Marco Bruno me deu um norte bem interessante sobre plugins para frontenders. Veja também &lt;a href=&quot;http://spf13.com/post/the-15-best-vim-plugins&quot;&gt;esse post&lt;/a&gt; e &lt;a href=&quot;http://joelhooks.com/blog/2013/04/23/5-essential-vim-plugins/&quot;&gt;esse&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Recomendo o plugin do &lt;a href=&quot;http://vimawesome.com/plugin/nerdtree-red&quot;&gt;NERDTree&lt;/a&gt; e o &lt;a href=&quot;http://vimawesome.com/plugin/vim-polyglot&quot;&gt;vim-polyglot&lt;/a&gt; como essencial, o resto é bem pessoal.&lt;/p&gt;

&lt;p&gt;O VIM é um universo gigante e tentei dar um panorama geral para iniciantes se introduzirem nesse ecossistema de forma rápida e simples para depois se aprofundar. Qualquer dúvida, nos comentários.&lt;/p&gt;

</description>
        <pubDate>Mon, 13 Jun 2016 00:00:00 -0300</pubDate>
        <link>/2016/06/13/vamos-falar-sobre-o-vim.html</link>
        <guid isPermaLink="true">/2016/06/13/vamos-falar-sobre-o-vim.html</guid>
        
        <category>workflow</category>
        
        
      </item>
    
      <item>
        <title>II Encontro da comunidade UX Design - Natal-RN</title>
        <description>&lt;div class=&quot;post-img-container&quot;&gt;
	&lt;img class=&quot;post-img&quot; src=&quot;/assets/ux.png&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;UX Design é um termo que muito tem se ouvido por todos os lados na área de desenvolvimento web. Tem crescido muito o número de ferramentas, o número de pessoas interessadas no assunto e a quantidade de bons conteúdos na web. Aqui em Natal-RN não foi diferente, há dois meses foi criada a comunidade de UX Design Natal. A iniciativa partiu de profissionais da área que sentiam necessidade de discussão e união de pessoas com tais interesses para que pudessem surgir ideias, projetos e principalmente: para que o conhecimento fosse difundido (leia mais sobre o surgimento do grupo &lt;a href=&quot;https://medium.com/ux-design-natal/difundindo-o-ux-design-em-natal-rn-eacb64f231af#.xjizkebrx&quot;&gt;aqui&lt;/a&gt;). Ontem houve o segundo encontro do grupo e vou falar um pouco sobre como foi. 
&lt;!--bora--&gt;&lt;/p&gt;

&lt;p&gt;Os encontros presenciais do grupo tem como objetivo fomentar a troca de conhecimentos e experiência entre todos os membros para que o UX Design seja cada vez mais difundido e entendido. No II encontro tivemos a presença do estúdio &lt;a href=&quot;http://www.estudioproa.com/&quot;&gt;Proa&lt;/a&gt;, representado por &lt;a href=&quot;https://www.behance.net/augustoserquiz&quot;&gt;Augusto&lt;/a&gt; e &lt;a href=&quot;https://www.behance.net/mateustinoco&quot;&gt;Mateus&lt;/a&gt;. Eles foram convidados para nos mostrar o processo criativo do estúdio que fazem parte e nos ajudar a entender sobre como a experiência de usuário pode ser interessante para casos de produtos digitais e sobre como algumas metodologias de UX ajudam eles na hora de entender as perspectivas do lado dos clientes deles.&lt;/p&gt;

&lt;p&gt;O espírito do estúdio Proa é algo que tem que ser levado em consideração antes de qualquer coisa. Como o nome já diz (“proa” é a parte dianteira do barco), o estúdio veio à tona com a proposta de inovar o mercado e trazer uma nova ideia sobre o que é design, sobre como devemos tratar o design e sobre como devemos trabalhar com design.&lt;/p&gt;

&lt;p&gt;Ao longo da fala dos designers, pudemos perceber alguns pontos interessantes que irei listar aqui.&lt;/p&gt;

&lt;h2 id=&quot;designers-desenham-solues&quot;&gt;Designers desenham soluções&lt;/h2&gt;

&lt;p&gt;Muita gente confunde o trabalho dos designers com algo meramente artístico. Se você pensa assim, está muito enganado. Mais do que nunca, vivemos num momento em que tudo tem que ter um porquê e uma motivação muito forte, se não for assim, acaba perdendo o sentido no meio de tanta informação que temos a nossa disposição. Vendo as metodologias apresentadas pelos rapazes do Estúdio Proa, ficou muito visível que o que eles fazem é um estudo específico pra cada caso, onde se busca a melhor solução viável com o fim de suprir a necessidade do cliente e do usuário. Esse é um aspecto bastante presente em metodologias de UX: nada é por acaso, tudo tem um motivo. Se não tem um motivo, é algo que pode facilmente ser descartado.&lt;/p&gt;

&lt;h2 id=&quot;clientes-nem-sempre-sabem-o-que-querem&quot;&gt;Clientes nem sempre sabem o que querem.&lt;/h2&gt;

&lt;p&gt;Apesar de teoricamente serem os maiores conhecedores dos seus negócios, às vezes os clientes não sabem lidar com todo o significado que uma identidade visual, um site ou um cartão de visitas pode ter. É papel do designer entender quais as necessidades do cliente e ajudá-lo a entender quais as possibilidades. Apesar de conhecer seu negócio, nem sempre eles têm ideia do poder da experiência do usuário e como melhorar ela. Um bom design visual está diretamente ligado à experiência de usuário, portanto, ao entender as necessidades de um projeto visual, acaba-se também entendendo sua profundidade dentro do contexto dos usuários.&lt;/p&gt;

&lt;h2 id=&quot;saiba-porque-voc-est-usando-o-que-voc-est-usando&quot;&gt;Saiba porque você está usando o que você está usando&lt;/h2&gt;

&lt;p&gt;Todo mercado que tem mais de uma opção para escolha possui uma variedade de características em cada uma dessas opções. Portanto, na produção criativa não é diferente. Se você produz algo, é importante entender o que você quer atingir com aquilo e entender quais as melhores maneiras de fazer isso. Pensar nisso na perspectiva do usuário é onde a UX entra. Pensar não nos motivos para você que está produzindo e sim nos motivos para quem estará consumindo quando finalizado. Pudemos ver isso nos cases mostrados, onde haviam algumas características bem peculiares que tiveram que ser entendidas a fundo para que soluções pudessem ser achadas e só então as ferramentas para a implementação serem selecionadas.&lt;/p&gt;

&lt;h2 id=&quot;concluindo&quot;&gt;Concluindo&lt;/h2&gt;

&lt;p&gt;A apresentação do processo criativo do estúdio Proa foi de grande soma para o encontro de UX, pois pudemos perceber em suas metodologias a utilização de diversos conceitos de User Experience, entendendo suas aplicações na prática. Foi interessante entender como tais aspectos de UX atingem um estúdio de design, pois no meu caso, vejo UX muito mais na área de desenvolvimento web e as aplicações em outros nichos ainda é um mistério interessante de ser descoberto. Mas no fim das contas, é um mistério previsível, afinal todos nós queremos entender o usuário e suas necessidades para entregar as melhores soluções possíveis, as diferenças são apenas mínimos detalhes técnicos do nicho.&lt;/p&gt;

&lt;p&gt;O evento foi bastante produtivo e descontraído e reuniu um número considerável de pessoas. Acho que estamos criando um ecossistema interessante com tais iniciativas. Se você tem interesse na área, entre no nosso &lt;a href=&quot;https://www.facebook.com/groups/105147809888834/?fref=ts&quot;&gt;grupo no facebook&lt;/a&gt;, apesar dos encontros presenciais serem aqui em Natal, os links e discussões são universais. Sinta-se à vontade pra compartilhar textos e experiências, qualquer coisa que some é bem vinda.&lt;/p&gt;
</description>
        <pubDate>Thu, 09 Jun 2016 00:00:00 -0300</pubDate>
        <link>/2016/06/09/Encontro-II-Comunidade-UX-Design-Natal.html</link>
        <guid isPermaLink="true">/2016/06/09/Encontro-II-Comunidade-UX-Design-Natal.html</guid>
        
        <category>frontend,</category>
        
        <category>css</category>
        
        
      </item>
    
      <item>
        <title>Dicas de um frontend junior 2</title>
        <description>&lt;div class=&quot;post-img-container&quot;&gt;
	&lt;img class=&quot;post-img&quot; src=&quot;http://2chie424y5ug2kfkkypuhcvwq2.wpengine.netdna-cdn.com/files/2014/05/wip1.jpg&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;Há uns dias escrevi um post em que eu, desenvolvedor júnior, dava umas dicas sobre a área de frontend que aprendi na prática nos últimos meses trabalhando em uma startup que envolve tecnologia e educação. Acredito que aprendi bastante coisa com esse período de prática, porque apesar de ser um ambiente interessante e estimulante, eu trabalho basicamente sozinho e quando você trabalha sozinho e tem que se virar pra sanar suas dúvidas, pra criar um workflow decente e ainda fazer um pouco de Design, UX e tudo mais, no mínimo você vai aprender algumas coisas.
&lt;!--bora--&gt;
Então aqui vai mais algumas dicas que tenho para os amigos iniciantes na área.&lt;/p&gt;

&lt;h2 id=&quot;no-tenha-medo-de-desenvolver-as-coisas&quot;&gt;Não tenha medo de desenvolver as coisas&lt;/h2&gt;

&lt;p&gt;Meu esquema de trabalho é sempre o seguinte: o designer faz uma proposta de layout e eu vou implementando e conversando com ele sobre algumas melhorias para o ecossistema web. No começo apareceram algumas coisas que eu não tinha a mínima ideia de como ia fazer, mas eu sempre disse que dava pra implementar todas as propostas dadas por ele. E porque eu disse isso? Porque quando alguém pergunta se a gente sabe fazer algo e nos dá um prazo pra responder, a melhor alternativa é responder que sim e se não sabe, aprender a fazer da melhor forma possível. E foi o que eu sempre fiz. E isso foi um ótima estratégia, porque eu aprendi diversas coisas que eu não aprenderia se tivesse dito apenas pra ele exportar os assets todos e fizesse um site cheio de imagens. O que nos leva pra nossa próxima dica.&lt;/p&gt;

&lt;h2 id=&quot;use-o-mnimo-de-assets-possveis&quot;&gt;Use o mínimo de assets possíveis&lt;/h2&gt;

&lt;p&gt;Assets são, em suma, arquivos que utilizamos para complementar nossas páginas webs, como imagens, arquivos de fontes e folhas de estilo. É óbvio que você não vai se limitar a usar 2 ou 3 imagens no site se o site for um galeria de imagens. Aqui falo de um conceito de design utilizado no frontend tanto para melhorar a performace do projeto quanto para melhorar as habilidades de estilização com CSS. O conceito de design que quero introduzir é o de “não use mais do que o necessário”. Se eu for procurar, vou achar o nome do autor que fala sobre isso, mas agora não é o foco. Apenas guarde na cabeça “não use mais do que o necessário”.&lt;/p&gt;

&lt;p&gt;Sabe quando você usa uma imagem no logo quando podia utilizar uma heading tag ou quando poderia usar um ícone daquela lib que você importou ao invés de usar uma imagem como ícone do facebook? Pois é. Esteja sempre pensando “será que isso é realmente necessário?”, pois às vezes enchemos nosso projeto de coisas que na prática são inúteis ou poderiam ser substituídas por outras. Às vezes demoramos um pouco mais para chegar num determinado efeito visual com CSS que poderia ser resolvido apenas com a utilização de uma imagem na página, mas será que seria a solução mais ideal mesmo?&lt;/p&gt;

&lt;p&gt;Nos últimos tempos, animações, transitions, &lt;a href=&quot;http://codepen.io/MarioSkynex/pen/MeYJGR&quot;&gt;box-shadow&lt;/a&gt;, Canvas e &lt;a href=&quot;http://willianjusten.com.br/por-que-usar-svg/&quot;&gt;SVG&lt;/a&gt; são tecnologias que têm sido muito utilizadas para criação de designs muito eficientes e bonitos. Pode ser uma boa estudar isso um pouco mais a fundo se te interessa a área de design também, além de frontend.&lt;/p&gt;

&lt;h2 id=&quot;desenvolva-um-starter&quot;&gt;Desenvolva um starter&lt;/h2&gt;

&lt;p&gt;Sabe quando você tem que começar algum projeto novo e fica criando os arquivos e nomeando e modularizando em pastas e perdendo tempo fazendo algo que não soma nada no teu aprendizado? Pois é, você precisa ser mais preguiçoso. É aquela velha história de que todo programador é um preguiçoso, mas preguiçoso o suficiente pra escrever um starter que faça tudo isso pra você.&lt;/p&gt;

&lt;p&gt;Existem diversos jeitos de fazer isso. O mais simples, ao meu ver, é usando o npm. Você cria um projeto com todos os arquivos iniciais criados, gera um pacote do npm e publica ele. Quando quiser utilizá-lo é só chamar pelo próprio npm. Outra forma é criando no github um repositório e baixando ou clonando sempre que quiser começar um novo projeto, mas .git deverá ser apagado sempre que iniciado um novo projeto, caso se queira usar o git para versionar o novo projeto. Pode ser feito também através de um script do bash, caso você seja familirizado com shellscript e linux. O que importa é automatizar esse processo.&lt;/p&gt;

&lt;p&gt;Você pode também utilizar um starter já desenvolvido. Existem vários por aí, alguns frameworks já até fornecem os seus, como o ionic. Você também pode utilizar ferramentas como o &lt;a href=&quot;http://yeoman.io/&quot;&gt;Yeoman&lt;/a&gt;, o importante é não perder tempo criando tudo na mão.&lt;/p&gt;

&lt;h2 id=&quot;desenvolva-um-framework&quot;&gt;Desenvolva um framework&lt;/h2&gt;

&lt;p&gt;Este é um tópico que eu ainda não botei em prática por falta de tempo, mas que pretendo no futuro aplicar. Criar um framework não quer dizer criar um Angular ou React da vida, mas sim algo como o &lt;a href=&quot;http://getskeleton.com/&quot;&gt;skeleton&lt;/a&gt; ou o &lt;a href=&quot;http://purecss.io/&quot;&gt;Pure&lt;/a&gt;. Peguei essa dica com o &lt;a href=&quot;https://github.com/cjpatoilo&quot;&gt;cjpatolio&lt;/a&gt;, desenvolvedor do &lt;a href=&quot;http://milligram.github.io/&quot;&gt;Milligram&lt;/a&gt;;&lt;/p&gt;

&lt;p&gt;Em um tópico do fórum &lt;a href=&quot;https://github.com/frontendbr/forum/issues/164&quot;&gt;FrontendBR&lt;/a&gt; sobre projetos open source, o autor falou sobre como o desenvolvimento desse framework foi interessante para o aprendizado dele. Acredito que é interessante porque quando se propõe desenvolver algo para outros desenvolvedores, seu cuidado tem que ser redobrado para escrever código legível, reutilizável e funcional. E se não escrever, a comunidade vai criticar até que ele fique bom o suficiente.&lt;/p&gt;

&lt;p&gt;Um exemplo disso é esse blog, que recebo algumas críticas de vez em quando e acabo sempre melhorando uma coisinha aqui e outra ali, tanto no conteúdo como no layout.&lt;/p&gt;

&lt;p&gt;Essas foram mais algumas dicas de um desenvolvedor frontend júnior. Críticas e sugestões nos comentários. Até a próxima.&lt;/p&gt;

</description>
        <pubDate>Mon, 06 Jun 2016 00:00:00 -0300</pubDate>
        <link>/2016/06/06/Dicas-de-um-Frontend-Junior-2.html</link>
        <guid isPermaLink="true">/2016/06/06/Dicas-de-um-Frontend-Junior-2.html</guid>
        
        <category>dicas,</category>
        
        <category>frontend</category>
        
        
      </item>
    
      <item>
        <title>.css-comentado 01 - Thumbnail com botão oculto</title>
        <description>&lt;div class=&quot;post-img-container&quot;&gt;
	&lt;img class=&quot;post-img&quot; src=&quot;/assets/comment.png&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;Ao longo dos meus estudos, foi notável a grande quantidade de tutoriais com códigos prontos que achei pela internet. Eles sempre nos dão a solução para o problema, porém, nunca te explicam direito o porquê de tais soluções. Então decidi fazer uma série de tutoriais que além de terem o código, acompanham uma explicação um pouco mais detalhada sobre as soluções adotadas. Não sei se esse formato de tutorial é bem aceito, mas aqui fica minha proposta. Hoje falaremos sobre thumbnails com botões ocultos.
&lt;!--bora--&gt;&lt;/p&gt;

&lt;p&gt;Aqui temos o nosso exemplo funcionando com o código completo:&lt;/p&gt;

&lt;p data-height=&quot;400&quot; data-theme-id=&quot;0&quot; data-slug-hash=&quot;MeWvme&quot; data-default-tab=&quot;css,result&quot; data-user=&quot;netoguimaraes&quot; data-embed-version=&quot;2&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;http://codepen.io/netoguimaraes/pen/MeWvme/&quot;&gt;MeWvme&lt;/a&gt; by João Neto Guimarães (&lt;a href=&quot;http://codepen.io/netoguimaraes&quot;&gt;@netoguimaraes&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;//assets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Para quem já entende de CSS consideravelmente, o exemplo no codepen já basta para o entendimento do efeito. Mas meu foco aqui é justamente quem tem certa dificuldade com a implementação e quem não entende exatamente o que está acontecendo no código.&lt;/p&gt;

&lt;p&gt;Vamos dissecar as coisas melhor aqui.&lt;/p&gt;

&lt;h2 id=&quot;estruturando-as-coisas&quot;&gt;Estruturando as coisas&lt;/h2&gt;

&lt;p&gt;Se você sabe exatamente o que quer fazer e como vai fazer, a melhor coisa pra começar a construção de qualquer elemento é escrever todo o código HTML que você irá precisar. É comum ir escrevendo o HTML de acordo com as necessidades, mas sempre que possível é interessante escrever o HTML todo de uma só vez para dividirmos melhor as coisas, mas isso vai de cada um. Então eu escrevi o seguinte código:&lt;/p&gt;

&lt;pre&gt;
	&lt;code class=&quot;language-markup&quot;&gt;
		&amp;lt;a href=&amp;quot;#&amp;quot; class=&amp;quot;container&amp;quot;&amp;gt;
		  &amp;lt;img class=&amp;quot;container-img&amp;quot; src=&amp;quot;https://static.pexels.com/photos/6413/people-eyes-playing-young.jpg&amp;quot; alt=&amp;quot;a boy with a ball&amp;quot;/&amp;gt;
		  &amp;lt;span class=&amp;quot;hidden-link&amp;quot; &amp;gt;Bot&amp;atilde;o&amp;lt;/span&amp;gt;
		&amp;lt;/a&amp;gt;
	&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;Um código simples. Uma &lt;code&gt;a&lt;/code&gt; com uma &lt;code&gt;img&lt;/code&gt; e um &lt;code&gt;span&lt;/code&gt;, que simula um botão, inseridos nela. O elemento &lt;code&gt;&amp;lt;a href=&amp;quot;#&amp;quot; class=&amp;quot;container&amp;quot;&amp;gt;&lt;/code&gt; funcionará como um elemento de bloco aqui, como uma &lt;code&gt;div&lt;/code&gt;. Usamos ele ao invés de uma &lt;code&gt;div&lt;/code&gt; para que todo o corpo do container funcione como um link clicável, auxiliando assim a acessibilidade.&lt;/p&gt;

&lt;p&gt;Perceba que o nome da classe do botão já indica uma das funcionalidades que teremos que implementar: a sua invisibilidade. Há várias formas de implementar invisibilidade com CSS3. A primeira é declarando a opacidade com o valor 0 (&lt;code&gt;opacity: 0;&lt;/code&gt;). Dessa forma, o elemento não irá aparecer, porém continuará ocupando espaço na página, apesar dele não estar visível, ele continua lá. Essa solução é praticamente igual a declarar a visibilidade igual a “escondido” (&lt;code&gt;visibily: hidden;&lt;/code&gt;), vamos entender suas diferenças no fim do artigo. Uma outra solução é definir &lt;code&gt;display: none;&lt;/code&gt;. Ao contrário das duas primeiras, nessa solução o elemento some por completo do documento, seu epaço é tomado pelos outros elementos, dependendo das configurações do layout. Mais à frente iremos entender qual dessas é a melhor solução para tornar o botão inicialmente invisível.&lt;/p&gt;

&lt;h2 id=&quot;estilizando-as-coisas&quot;&gt;Estilizando as coisas&lt;/h2&gt;

&lt;p&gt;As primeiras coisas que escreveremos no nosso CSS serão as estilizações simples dos elementos que temos no nosso HTML. Segue o código:&lt;/p&gt;

&lt;pre&gt;
	&lt;code class=&quot;language-css&quot;&gt;
		.container{
		  position: relative;
		  height: 400px;
		  width: 400px;
		  overflow: hidden;
		  border: 1px solid black;
		}
		.container-img{
		  height: 100%;
		  width: auto;
		}
		.hidden-pseudobutton{
		  display: block;
		  position: absolute;
		  width: 150px;
		  height: 50px;
		  top: 50%;
		  left: 50%;
		  margin: -25px 0px 0px -75px;
		  padding: 10px 50px;
		  opacity: 0;
		  background-color: #008cc4;
		  border: none;
		  border-radius: 30px;
		  font-size: 1.3em;
		  color: white;
		  cursor: pointer;
		}
	&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;Primeiro temos a estilização do nosso &lt;code&gt;container&lt;/code&gt; primário, que terá a imagem inserida dentro dele. O &lt;code&gt;position: relative;&lt;/code&gt; é opcional, depende de como será construído o layout, apenas por exemplo eu o coloquei aqui. Defini suas e medidas de altura e largura e defini &lt;code&gt;overflow: hidden;&lt;/code&gt; que vai garantir que mesmo que a imagem tenha altura ou largura maior que o container, ela não ultrapassará as medidas do container e será clipada. Adicionei também uma borda apenas para melhor vizualização dos limites do container.&lt;/p&gt;

&lt;p&gt;Depois temos o seletor que estiliza a &lt;code&gt;img&lt;/code&gt;. Aqui temos que a altura será de 100%, ou seja, sempre a imagem ocupará toda a altura do container pai, porém a largura vai variar automaticamente, com a propriedade &lt;code&gt;auto&lt;/code&gt; no seletor &lt;code&gt;width&lt;/code&gt;. Pra que isso serve? Para que a imagem não fique distorcida. Ela ocupará toda a altura, mas a largura se ajustará de acordo com a proporção da mesma. Essa dica é valiosa porque funciona independente da altura do container.&lt;/p&gt;

&lt;p&gt;Logo depois temos a estilização do pseudobotão. Estilizações de itens como botões, links e inputs são estilizações em geral longas, pois seus estilos padrões são muito distantes do que consideramos hoje em dia algo agradável e harmônico. O seguinte código é um jeito de centralizar elementos com &lt;code&gt;position: absolute;&lt;/code&gt; e pode ser usado em diversos casos.&lt;/p&gt;
&lt;pre&gt;
	&lt;code class=&quot;language-css&quot;&gt;
		display: block;
		position: absolute;
		width: 150px;
		height: 50px;
		top: 50%;
		left: 50%;
		margin: -25px 0px 0px -75px; 
		/* -------------------------------------------------------------*/
		/* Centralizando elemento absoluto vertical e horizontalmente	*/
		/* margin-top = -(altura do elemento/2)px 						*/
		/* margin-top = -(150/2)px -&amp;gt; margin do top = -75px 			*/
		/* margin-left = -(largura do elemento/2)px 					*/
		/* margin-left = -(50/2)px -&amp;gt; margin do top = -25px 			*/
	&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;O que acontece é: as propriedades &lt;code&gt;top&lt;/code&gt; e &lt;code&gt;left&lt;/code&gt; com valores iguais a &lt;code&gt;50%&lt;/code&gt; fazem com que o elemento comece a ser apresentado exatamente no meio do container e dependendo da altura e largura, cresça para baixo e para a direita. Se pegarmos os valores exatos da metade da largura do elemento e adcionarmos a uma margem negativa para a esquerda, temos esse elemento centralizado na horizontal. Se pegarmos o valor exato da altura e adicionarmos à margem negativa do topo, teremos esse elemento centralizado na vertical, logo, o elemento está posicionado exatamente no centro do container. 
O resto das estilizações são puramente estíticas e não vou entrar em detalhes aqui.&lt;/p&gt;

&lt;h2 id=&quot;criando-as-transies&quot;&gt;Criando as transições&lt;/h2&gt;

&lt;p&gt;Bem, agora que temos nossos elementos devidamente estilizados, precisamos dar vida ao nosso componente. Precisamos que ao passar o mouse em cima do container, haja um desfoque na imagem, uma leve rotação nela e também que apareça o pseudobotão, que na verdade é um link. Vamos iniciar a implementação pelo efeito que a imagem vai ter quando o mouse passar em cima do container.&lt;/p&gt;

&lt;p&gt;O código é este:&lt;/p&gt;
&lt;pre&gt;
	&lt;code class=&quot;language-css&quot;&gt;
		.container:hover &amp;gt; .container-img{
		  transition: 1s ease-in-out; 
		  transform: scale(1.2,1.2) rotate(5deg);
		  -webkit-filter: blur(10px);
		  filter: blur(10px);
		}
	&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;Agora vamos entender melhor. O efeito que queremos denota basicamente um &lt;code&gt;if (mouse.hover(container)){show.(button)}&lt;/code&gt;. Podíamos fazer isso com JavaScript, mas dá pra fazer com CSS, &lt;a href=&quot;http://blog.netoguimaraes.com.br/2016/05/26/Eu-nao-sei-fazer-tudo-com-css.html&quot;&gt;então vamos fazer com CSS&lt;/a&gt;. Para implementarmos isso, precisamos entender o funcionamento do seletor &lt;code&gt;&amp;gt;&lt;/code&gt;. Sua função é obter os elementos filhos de um seletor pai. No nosso caso, &lt;code&gt;.container&lt;/code&gt; é o pai e &lt;code&gt;.container-img&lt;/code&gt; é o filho. A mágica aqui acontece o adicionarmos a pseudoclasse &lt;code&gt;:hover&lt;/code&gt; ao seletor pai. Isso indica que o seletor filho só será agraciado com as propriedades do bloco de código quando o elemento pai estiver com o mouse em cima de si. Portanto, o código mostrado acima é nada mais nada menos do que uma abstração de um &lt;code&gt;if&lt;/code&gt;. “Se o mouse estiver em cima do container pai, faça com que o filho tenha essas propriedades que eu vou dar”. E magicamente, sem nenhum código JavaScript, temos um “&lt;code&gt;if&lt;/code&gt;” implementado e nosso componente quase pronto.&lt;/p&gt;

&lt;p&gt;Falando do efeito em si, nada mais é do que um zoom, uma rotação e um desfoque, respectivamente &lt;code&gt;scale(1.2,1.2) &lt;/code&gt;, &lt;code&gt;rotate(5deg)&lt;/code&gt; e &lt;code&gt;filter: blur(10px);&lt;/code&gt;. É importante perceber que estes efeitos não vão se comportar da mesma forma nos diversos navegadores, por isso é importante a adição de todos os prefixos, se você quiser que funcione em todos os browsers da forma correta. Para saber mais sobre suporte entre os browsers, acesse sempre &lt;a href=&quot;http://caniuse.com/#feat=css-filters&quot;&gt;este site&lt;/a&gt; e pesquise a determinada propriedade que você quer usar. Como o &lt;code&gt;filter&lt;/code&gt; é suportado pela grande maioria dos browsers atualizados, não vou me importar tanto com a compatibilidade, mas no futuro pretendo escrever um texto sobre isso e sobre como esse tema afeta nossa produção.&lt;/p&gt;

&lt;p&gt;Para fazermos com que o botão apareça sob as mesmas circunstâncias do efeito da foto, adicionamos o seguinte código:&lt;/p&gt;

&lt;pre&gt;
	&lt;code class=&quot;language-css&quot;&gt;
	.container:hover &amp;gt; .hidden-pseudobutton{
	  opacity: 1;
	}
	&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;Agora temos o efeito acontecendo, porém de forma instantânea. Para que o efeito ocorra de forma gradual e harmônica, temos que adicionar a propriedade &lt;code&gt;transition&lt;/code&gt; em cada um dos elementos que vão fazer parte da animação, com seus determinados valores e aí teremos nosso código finalizado. Veja abaixo como ficou o código e o exemplo final:&lt;/p&gt;

&lt;p data-height=&quot;265&quot; data-theme-id=&quot;0&quot; data-slug-hash=&quot;MeWvme&quot; data-default-tab=&quot;css,result&quot; data-user=&quot;netoguimaraes&quot; data-embed-version=&quot;2&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;http://codepen.io/netoguimaraes/pen/MeWvme/&quot;&gt;MeWvme&lt;/a&gt; by João Neto Guimarães (&lt;a href=&quot;http://codepen.io/netoguimaraes&quot;&gt;@netoguimaraes&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;//assets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Aqui entendemos porque utilizamos o método da opacidade para fazer o elemento sumir e desaparecer. Para utilizarmos transições, precisamos tratar com propriedades animáveis. Das 3 que poderíamos usar, apenas a &lt;code&gt;visibility&lt;/code&gt; e a &lt;code&gt;opacity&lt;/code&gt; são animáveis, porém a opacity possui valores numerais, logo sua animação é mais fluida e pode ser mais manipulada. Para conseguirmos o efeito de fadeIn, apenas usando ela seria possível.&lt;/p&gt;

&lt;h1 id=&quot;consideraes-finais&quot;&gt;Considerações Finais&lt;/h1&gt;
&lt;p&gt;Esse exemplo que fiz pode ser útil em casos onde a imagem é o mais importante e o link relacionado a ela esteja em segundo plano. Usei algo parecido na construção do meu portifólio, por exemplo. Pode ser útil em galerias de imagens e thumbnails de vídeos.&lt;/p&gt;

&lt;p&gt;Se você chegou até aqui e aprendeu algo novo, indique esse texto para alguém que possivelmente também aprenderá algo novo. Não falo isso por querer ganhar mais visualizações e nem nada, até porque meu blog não é monetizado. Quero apenas que este conhecimento que passei possa chegar a mais lugares. Qualquer dúvida ou sugestão deixem nos comentários que eu respondo assim que possível. Não sei se esse modelo de postagem é interessante ou não, na verdade, mas fiz o primeiro para testar, ficaria feliz com seu feedback.&lt;/p&gt;

</description>
        <pubDate>Sun, 29 May 2016 00:00:00 -0300</pubDate>
        <link>/2016/05/29/css-comentado-thumbnail-com-botao-oculto.html</link>
        <guid isPermaLink="true">/2016/05/29/css-comentado-thumbnail-com-botao-oculto.html</guid>
        
        <category>frontend,</category>
        
        <category>css</category>
        
        
      </item>
    
      <item>
        <title>Eu não sei fazer tudo com CSS</title>
        <description>&lt;div class=&quot;post-img-container&quot;&gt;
	&lt;img class=&quot;post-img&quot; src=&quot;http://16102-presscdn-0-48.pagely.netdna-cdn.com/wp-content/uploads/2014/12/css3_2.jpg&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;Se você costuma ler bastante e acompanhar os assuntos do universo de desenvolvimento frontend, já percebeu que faz um tempo que está rolando uma moda de fazer tudo que for possível com CSS. E não digo moda no sentido pejorativo. Moda porque tem aumentado a frequência de aparições de posts, pens e exemplos de código com isso. Em alguns casos são até coisas úteis, como um menu escondido com uma transição legal ou qualquer coisa do tipo, mas outras vezes são coisas bem &lt;a href=&quot;http://codepen.io/p-stacey-a/pen/ZWNryz&quot;&gt;fúteis&lt;/a&gt;. O  menu do meu blog eu fiz usando além de css3, um pouquinho de JavaScript, mas já vi gente fazendo só com CSS. Enfim, vamos explorar um pouco mais esse assunto?
&lt;!--bora--&gt;&lt;/p&gt;

&lt;h2 id=&quot;porque-esto-fazendo-tanta-coisa-apenas-com-css3&quot;&gt;Porque estão fazendo tanta coisa apenas com CSS3?&lt;/h2&gt;

&lt;p&gt;Primeiro, levando em consideração o conceito de programação: &lt;code&gt; entrada de dados &amp;#8594; processamento &amp;#8594; e saída de dados&lt;/code&gt;, podemos dizer que, ao contrário do que muitos dizem e desconstruindo gradiosos anos de conceituação, CSS3, se já não é, está virando uma linguagem de programação. Apesar de a maior parte dela ser uma linguagem visual de estilização, já temos nela recursos que implementam manipulação de dados para obtenção de determinados resultados. O exemplo mais claro disso é a função &lt;a href=&quot;https://developer.mozilla.org/pt-BR/docs/Web/CSS/calc&quot;&gt;&lt;code&gt;calc()&lt;/code&gt;&lt;/a&gt; do CSS. Podemos ver outros diversos exemplos de casos de lógica de programação aplicada dentro do CSS3, como o caso da pseudoclasse &lt;code class=&quot;language-css&quot;&gt;&lt;a href=&quot;https://developer.mozilla.org/pt-BR/docs/Web/CSS/:nth-child&quot;&gt;:nth-child()&lt;/a&gt;&lt;/code&gt; ou das &lt;a href=&quot;https://developer.mozilla.org/pt-BR/docs/Web/CSS/Using_CSS_variables&quot;&gt;variáveis&lt;/a&gt;, que ainda não estão com suporte aceitável, mas já são uma certeza para a próxima versão do CSS. Isso sem contar o poder que os preprocessadores possuem.&lt;/p&gt;

&lt;p&gt;E queira ou não admitir que o CSS3 está dando os primeiros passos como linguagem de programação, é inegável que as funcionalidades adicionadas à linguagem na sua versão 3 dão margem pra infinitas coisas, dando enfase à: &lt;code&gt;flexbox&lt;/code&gt;, &lt;code&gt;animation&lt;/code&gt;, &lt;code&gt;transition&lt;/code&gt; e &lt;code&gt;transform&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;E vejam que eu não estou entrando nem no mérito das mágicas que os preprocessadores conseguem fazer compilando pra CSS. Meu ponto aqui é apenas enfatizar que este mundo de coisas que dá pra fazer com a linguagem em si. E a pergunta para o subtítulo é obvia. Sabe porque estão fazendo tanta coisa apenas só com css? Porque dá pra fazer. Veja alguns exemplos:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://codepen.io/i0z/pen/mFLCw&quot;&gt;Jogo feito apenas com CSS&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://codepen.io/Twikito/pen/zGdqVO&quot;&gt;Menu Lateral escondido&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://codepen.io/Haru89ka/pen/jPbVWZ&quot;&gt;Barra de navegação fixa&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://codepen.io/search/pens?q=only+css&amp;amp;limit=all&amp;amp;type=type-pens&quot;&gt;Diversos outros exemplos&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;d-pra-fazer-e-eu-no-sei-mas-isso-no-quer-dizer-que-eu-no-v-saber-pra-sempre&quot;&gt;Dá pra fazer e eu não sei… Mas isso não quer dizer que eu não vá saber pra sempre.&lt;/h2&gt;

&lt;p&gt;Como se sabe de longa data, os estudo na área tecnológica são freneticamente incansáveis. Se você programa todo dia, todo dia vai descobrir uma coisa nova. Se você implementa layouts ou UI todo dia, sempre vai ter que ralar um pouquinho mais para fazer algum componente ter tal comportamento ou característica, por exemplo. E se você for iniciante, vai descobrir mais coisas ainda. Eu, por exemplo, descobri hoje como fazer paginação e configurar um resumo do post no &lt;a href=&quot;https://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt;, que suporta esse blog. E se você não sabe fazer tudo com CSS3, assim como eu, comece a estudar para que daqui um tempo saiba.&lt;/p&gt;

&lt;p&gt;Acredito que com o fato de o javascript estar tomando rumos fora do clássico de manipulação de propriedades e do DOM, somando com o avanço do CSS em relação ao seu design e funcionalidades, daqui um tempo pode ser capaz implementar projetos grandes utilizando javaScript apenas para implementação de um MVW no frontend, por exemplo, e deixando o CSS tomar conta do resto. Talvez eu esteja até falando besteira, mas querendo ou não, o argumento é válido: se você não sabe como utilizar o CSS de um outro ponto de vista que não seja o padrão de 10 anos atrás, definindo seu &lt;code&gt;padding&lt;/code&gt; e &lt;code&gt;margin&lt;/code&gt; e apenas isso, você pode estar criando um monstro.&lt;/p&gt;

&lt;p&gt;E eu percebi isso.&lt;/p&gt;

&lt;h2 id=&quot;alimento-o-monstro-pra-que-ele-no-me-ataque-ou-me-alimento-para-atac-lo&quot;&gt;Alimento o monstro pra que ele não me ataque ou me alimento para atacá-lo?&lt;/h2&gt;

&lt;p&gt;Eu saí de casa e comi para caralho. Comecei a estudar CSS3 mais a fundo. Comecei de leve, com &lt;code&gt;transitions&lt;/code&gt; e &lt;code&gt;transforms&lt;/code&gt;, depois entendi como funcionam as &lt;code&gt;animations&lt;/code&gt; e ainda estou fazendo algumas experimentações para ver onde consigo chegar nisso. Depois pretendo fazer um post com o roadmap de estudo de CSS que eu estou montando, abordando algumas práticas importantes para se aprender.&lt;/p&gt;

&lt;p&gt;É óbvio que o JavaScript é necessário, eu não estou tirando mérito de quem o usa. Ainda há coisas no frontend que só conseguem ser reproduzidas com JS e acredito que isso ainda vai demorar um pouco para mudar. Mas acontece que se desafiar a fazer mais coisas com CSS3 vai incentivar a criatividade e a resolução de problemas de um desenvolvedor infinitamente. Eu ainda uso JavaScript para muita coisa que sei que daria pra fazer apenas com CSS, se usado da maneira correta, mas na minha cabeça, a modularidade das coisas ainda funcionam no esquema: CSS estiliza e JavaScript manipula uns dados, mexe no DOM e faz a mágica. O mais difícil eu já fiz, que foi entender que isso não é exatamente assim, o resto é só questão de tempo.&lt;/p&gt;

&lt;p&gt;Para você que está começando a se interessar mais por CSS agora, recomendo a estudar a fundo os códigos do &lt;a href=&quot;http://codepen.io&quot;&gt;CodePen&lt;/a&gt;, porque lá os doutores se revelam e não tem pra ninguém, caro colega. Basta a nós, reles mortais, enfiar a cara no computador e estudar pra tentar fazer o mínimo. Acho que agora que de um panorama geral, sinto-me confortável para ir atrás e experimentações concretas desse modelo OnlyCSS de fazer as coisas. Caso saia alguma coisa legal, posto um guia aqui no blog de como cheguei em tal solução, como foi a implementação e o código em si.&lt;/p&gt;

&lt;p&gt;Caso não chegue a nada legal é porque não fui tão a fundo nisso quanto deveria. Até, meus caros.&lt;/p&gt;

</description>
        <pubDate>Thu, 26 May 2016 00:00:00 -0300</pubDate>
        <link>/2016/05/26/Eu-nao-sei-fazer-tudo-com-css.html</link>
        <guid isPermaLink="true">/2016/05/26/Eu-nao-sei-fazer-tudo-com-css.html</guid>
        
        <category>frontend,</category>
        
        <category>css</category>
        
        
      </item>
    
      <item>
        <title>Dicas de um frontend junior</title>
        <description>&lt;div class=&quot;post-img-container&quot;&gt;
	&lt;img class=&quot;post-img&quot; src=&quot;http://2chie424y5ug2kfkkypuhcvwq2.wpengine.netdna-cdn.com/files/2014/05/wip1.jpg&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;Sempre vejo por aí, perambulando pela internet, aqueles posts revolucionários com títulos chamativos, algo como: “5 dicas para ser o melhor bambambam”, “5 dicas para dominar tal tecnologia” ou qualquer coisa do tipo. Chamo isso de “Síndrome dos cinco passos”. Em 5 passos você vai mudar sua vida, é sempre assim. Esses textos, que em sua maioria são apenas textos comuns que tentam se engrandecer com um título chamativo se tornaram febre nos últimos tempos de web e na verdade não trazem nada de tão maravilhoso assim.&lt;/p&gt;

&lt;!--bora--&gt;

&lt;p&gt;Nos últimos dias, terminando de construir esse blog, pedi umas dicas de design a um professor e a um amigo. E percebi que muito do que aprendi foi vendo, ouvindo e lendo os outros. Acabei por tentar me imaginar em algum momento sendo algum conselheiro ou algo do tipo. E percebi que apesar de não ser especialista em nada, tenho algumas coisas pra falar também. Hoje decidi falar sobre desenvolvimento frontend e dar algumas dicas para quem está começando nessa área. Acho que são valiosas não por eu ter muito conhecimento, mas sim por eu estar utilizando destas dicas e estar sentindo o efeito delas agora, que estou entrando mais a fundo nesse universo que é o Frontend.&lt;/p&gt;

&lt;p&gt;Aqui vão as dicas:&lt;/p&gt;

&lt;h2 id=&quot;no-pare-de-ler-sobre&quot;&gt;Não pare de ler sobre&lt;/h2&gt;
&lt;p&gt;Seja sobre design, técnicas de css, dicas sobre esquemas de cores, performace ou sobre aquele framework que você quer aprender, o mais importante é não parar de ler. Não digo para você ler o dia todo, mas ao menos ler todo dia um pouco sobre um tema. Com o tempo, se puder começar a escrever sobre também pode ser interessante, pois quando se escreve, se sintetiza, e quando se sintetiza, o conhecimento fica muito melhor armazenado no seu cérebro.&lt;/p&gt;

&lt;p&gt;Uma dica que pode ser interessantes para alguns é criar um dailylog sobre as leituras que fez. Simplesmente registrar em algum lugar as leituras que você faz, aconselho usar um repositório no github, pois é fácil de utilizar e te força a usá-lo, o que pode ser bom se você não tem esse costume. Tem muito dev bom por aí que mantem um dailylog e que pode ser interessante acompanhar. Aconselho aqui o do &lt;a href=&quot;https://github.com/LFeh/dailylog&quot;&gt;Felipe Fialho&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;veja-sempre-o-codepenhttpcodepenio&quot;&gt;Veja sempre o &lt;a href=&quot;http://codepen.io/&quot;&gt;Codepen&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;O codepen é basicamente um parquinho de diversões dos Frontends. É algo que não chega a ser o portifólio, mas dá pra sacar os talentos da galera lá. Existem coisas fantásticas feitas no codepen, que você pode ver o código, forkar, modificar e estudar. Criar o costume de abrir o codepen só pra sacar o que a galera tá fazendo ao redor do mundo é muito bom para sempre ter referências boas na manga. É melhor ainda se você além de ver o Pen rodando, fuça ele direitinho e tenta entender exatamente a lógica que o dev usou para chegar a tais resultados. E quando tiver ideias legais, não hesite em implementar elas e jogar lá. Muitas vezes não fazemos coisas legais por não ter onde aplicar, mas o codepen abriu a janela pra isso: implementar peças independente de se ter o jogo completo ou não.&lt;/p&gt;

&lt;h2 id=&quot;conhea-outros-desenvolvedores-e-seus-trabalhos&quot;&gt;Conheça outros desenvolvedores e seus trabalhos&lt;/h2&gt;

&lt;p&gt;Não falo aqui de conhecer todos os grandes desenvolvedores da área, saber seus nomes completos e endereço. Não tô falando também de conhecer todos os Engenheiros Frontend do Facebook. Grandes desenvolvedores não estão somente nas grandes empresas. E também não falo conhecer pessoalmente todos os devs bons do mundo e ser amigo deles. A internet encurtou distâncias, use isso a seu favor. O que quero dizer com este tópico é que você deve entender o valor dos desenvolvedores, acompanhar os que mais te agradam e entender o porque eles dizem as coisas que dizem, porque usam as coisas que usam ou porque fazem do jeito que fazem. Seguir alguns desenvolvedores que você se identifique vai te dar um aporte maior de aprendizado.&lt;/p&gt;

&lt;p&gt;Existem além de diversos blogs pessoais por aí, grupos de facebook, fóruns e diversos outros meios de criar uma rede de pessoas que &lt;a href=&quot;https://soundcloud.com/murilogun/media5&quot;&gt;te influenciam de alguma forma&lt;/a&gt;. Vou citar aqui o grupo &lt;a href=&quot;https://www.facebook.com/groups/osadpa/?fref=ts&quot;&gt;A.P.D.A&lt;/a&gt; e o fórum &lt;a href=&quot;https://github.com/frontendbr/forum/issues&quot;&gt;FrontendBr&lt;/a&gt;, que considero dois antros de bons devs, apesar de sempre ter algum pé no saco que se acha dono do mundo por saber um pouco mais do que a maioria ou aqueles que querem seu braço quando você só pode dar a mão.&lt;/p&gt;

&lt;h2 id=&quot;procure-criar-coisas-do-zero&quot;&gt;Procure criar coisas do zero&lt;/h2&gt;

&lt;p&gt;Eu sei que às vezes a gente quer apenas terminar alguma coisa pra poder começar outra, mas não deixe isso fazer com que você coloque os pés no lugar das mãos. Cada coisa em seu lugar. Nem sempre é bom só pegar um tutorial por aí e fazer acontecer o que você queria que acontecesse e deixar por isso mesmo. Se você tiver tempo, gaste um pouco mais dele e faça do zero, você vai entender bem mais das propriedades, dos atributos e vai acabar criando seu próprio “framework” interno, dentro do seu cérebro. Você vai desenvolver um jeito seu de fazer as coisas. É claro que com base em diversas outras coisas que você viu, implementou ou usou.&lt;/p&gt;

&lt;p&gt;Um exemplo classico disso é a questão que sempre acaba aparecendo nos fóruns e grupos: “devo aprender bootstrap?”. Não apenas bootstrap, mas diversos outros frameworks de CSS ou JS que agilizam nosso trabalho. Mas o que às vezes acaba se esquecendo é que essas ferramentas são pra quem já domina de CSS ou JS e que querem agilizar o processo. Também é comum achar que deve-se usar sempre preprocessador ou esses tais frameworks. Uma coisa que aprendi: todo framework pode ser útil em algum momento, mas a tecnologia pura é que nunca vai deixar de ser. Por exemplo: há casos em que é melhor não se usar bootstrap, mas você não é idiota pra decidir não usar CSS em algum projeto.&lt;/p&gt;

&lt;p&gt;Enfim, faça as coisas do zero se quiser aprender de verdade, pois coisas “prontas” resolverão o problema e ao mesmo tempo colocarão uma máscara no aprendizado.&lt;/p&gt;

&lt;h2 id=&quot;procure-entender-minimamente-os-conceitos-de-design&quot;&gt;Procure entender minimamente os conceitos de design&lt;/h2&gt;

&lt;p&gt;Mesmo se você for apenas um cortador de PSDs, é importante entender de alguns conceitos de design. Mas é óbvio que nem todo dev vai ser um design de primeira mão, mas pra mim é imprescindível ter o mínimo de noção de design, até para pode trabalhar com o designer de forma mais apropriada.&lt;/p&gt;

&lt;p&gt;Esse foi um fator que eu vim me dar conta há pouco tempo e estou tentando entender diversos aspectos, como a teoria das cores, arquitetura de informação, flat design e etc. São conceitos que te ajudarão a entender melhor o que você está programando e além disso, vai te ajudar em projetos paralelos. Ao montar o design deste blog por exemplo eu tive certa dificuldade com alguns aspectos de design que não estou tão habituado assim. Mas alguns que já tive um contato maior, pude desenvolver sozinho, como a tipografia, por exemplo.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Acho que as minhas dicas foram pertinentes para os iniciantes, apesar de algumas coisas parecerem óbvias para alguns, para outros não são. As coisas faladas aqui são coisas que eu estou pondo em prática ao longo do último ano, que foi quando comecei a estudar mais a fundo todo o universo de desenvolvimento frontend, principalmente nos últimos meses, quando comecei a trabalhar com isso profissionalmente. Apesar do bom tempo passado e dos conhecimentos adquiridos, sei que estou ainda começando nesse árduo caminho. Espero ter ajudado com alguma das dicas.&lt;/p&gt;
</description>
        <pubDate>Sat, 21 May 2016 00:00:00 -0300</pubDate>
        <link>/2016/05/21/Dicas-de-um-Frontend-Junior.html</link>
        <guid isPermaLink="true">/2016/05/21/Dicas-de-um-Frontend-Junior.html</guid>
        
        <category>dicas,</category>
        
        <category>frontend</category>
        
        
      </item>
    
      <item>
        <title>O pequeno universo que criamos na internet</title>
        <description>&lt;div class=&quot;post-img-container&quot;&gt;
	&lt;img class=&quot;post-img&quot; src=&quot;https://cdn-images-1.medium.com/max/800/1*IXVMU1mo_Oz8c_HcXD15Wg.gif&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;Já parou pra pensar sobre quantos sites você visita frequentemente?&lt;/p&gt;

&lt;p&gt;Esses dias eu parei pra pensar sobre isso e se tirar redes sociais e sites em que tenho algum vínculo de trabalho ou que tenho que ficar acessando sempre por necessidades maiores — sistema da faculdade, gmail etc — , não sobram muitos sites.Isso sempre me passou despercebido e eu até consegui listar os motivos pelos quais eu me acomodei a uma meia dúzia de sites:&lt;/p&gt;

&lt;!--bora--&gt;

&lt;h3 id=&quot;falta-de-tempo&quot;&gt;1. Falta de tempo&lt;/h3&gt;

&lt;p&gt;É provavelmente o argumento mais usado quando esse assunto é botado na mesa. É óbvio que o último século e suas revoluções industriais nos deixaram com bem menos tempo, mas também nos fez acreditar que todo o tempo livre fora do trabalho e dos estudos deve ser gasto com “lazer”. Além disso, todas as mudanças sociais do século passado nos fizeram tratar lazer como ócio. Parece até que soa errado ter um hobby produtivo ou um hobby que envolva trabalho duro. Eu por exemplo quero um dia ter marcenaria como um hobby, mas sempre que falo isso pra alguém, não sou levado a sério. Quem já viu alguém ter um hobby que não seja ver seriado e falar bem do novo filme do Nolan, não é mesmo?&lt;/p&gt;

&lt;h3 id=&quot;o-facebook--um-poo-de-links&quot;&gt;2. O Facebook é um poço de links&lt;/h3&gt;

&lt;p&gt;Foi um argumento que me fez pensar sobre o fato de eu justificar meu feed de páginas no facebook nos últimos tempos ser usado como uma espécie de leitor RSS ou agregador de leituras — pocket e cia. A maioria dos blogs hoje em dia tem página no facebook e isso faz com que acompanhar seus conteúdos seja mais rápido e pratico, já que você acessa o facebook com frequência e ele junta os posts dos seus amigos, os posts das páginas que você curte os posts das pessoas que você segue. Mas aí é que começa o problema pra mim. O facebook tem muita coisa. E pra completar, ainda tem a timeline infinita, literalmente. 1h de rolagem na timeline do facebook e você terá uma pá de links legais. Mas pelo fato de ter muita informação, dos mais variados tipos e escopos, navegar pelo facebook gera muita ansiedade e faz as coisas parecerem que têm de ser rápidas. É exatamente por isso que ficamos com preguiça de ler algo além das manchetes e nos limitamos às 5 primeiras linhas de quase tudo. Acaba que adquirimos um monte de pequenas informações, boa parte um tanto inúteis e nos acomodamos com isso.&lt;/p&gt;

&lt;p&gt;É obvio que há pessoas que conseguem fazer do facebook um canal de conteúdos interessantes e juntam isso com uma boa administração de tempo e uma dose de paciência e autocontrole para não se limitar às 5 primeiras linhas de tudo que encontra pelo feed, mas esse não é nem o meu caso nem o da maioria.&lt;/p&gt;

&lt;p&gt;E eu perdi uns dias pensando sobre isso tudo.&lt;/p&gt;

&lt;p&gt;A web é muito grande para nos limitarmos a meia dúzia de sites.
Antes de começar a escrever isso, joguei no Google as palavras chaves “software livre”, que é um assunto que eu me interesso bastante e acho que leio bastante sobre também. Aproximadamente 2.810.000 resultados em 0,30 segundos, segundo o google. Joguei “free software” logo depois. Aproximadamente 1.510.000.000 resultados em 0,43 segundos. Vamos supor que metade dessas páginas que o google me retornou sejam inúteis para mim.&lt;/p&gt;

&lt;p&gt;Ainda assim eu terei um vasto número de páginas, portais, sites e blogs falando sobre software livre e eu continuo acessando os mesmos que sempre acessei, que se eu listar, não chego a nada mais que algumas dezenas de o páginas.
Me assusta saber que eu estou perdendo tanto conteúdo sobre temas que tenho níveis altos de interesse. E me assusta saber que não vi muita gente falando ou escrevendo sobre isso.&lt;/p&gt;

&lt;p&gt;Mas será que não tem muita gente mesmo falando sobre isso ou sou só eu que não conheço esses textos por não ter pesquisado de fato sobre isso para ver o que andam dizendo?&lt;/p&gt;

&lt;p&gt;Então eu fiz uma pesquisa no Google e achei um texto significativo.&lt;/p&gt;

&lt;p&gt;Eu não quis fazer o feed rss exatamente, mas o texto me fez pensar sobre o algoritmo de interesses que o facebook cria pra cada um de nós. Se você não conhece ou entende como funciona, leia um pouco aqui. Por fim, acabei descobrindo que curto 800 páginas, mas que na verdade, não recebo conteúdo de nem metade dessas. Sem falar no fato de que metade dessas páginas não me interessam de verdade.&lt;/p&gt;

&lt;p&gt;Rever tais conceitos só me fez entender que eu e a maioria das pessoas não sabemos usar a internet. Ou talvez tenhamos criado um jeito de usá-la que é muito cômodo e só tende a piorar e que fará das próximas gerações cada vez mais limitados. E se cada vez mais buscarmos menos coisas e por consequência disso e de coisas como o algoritmo do facebook, as coisas se encaminham para um futuro onde haverá também menos conteúdo sendo produzido.&lt;/p&gt;

&lt;p&gt;Espero que esse insight não seja uma profecia.&lt;/p&gt;
</description>
        <pubDate>Mon, 15 Feb 2016 00:00:00 -0300</pubDate>
        <link>/2016/02/15/O-pequeno-universo-que-criamos-na-internet.html</link>
        <guid isPermaLink="true">/2016/02/15/O-pequeno-universo-que-criamos-na-internet.html</guid>
        
        <category>seculo</category>
        
        <category>21,</category>
        
        <category>web</category>
        
        
      </item>
    
  </channel>
</rss>
